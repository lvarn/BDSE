% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/helper_functions_Gibbs_samplers.R
\name{initialise_output_storage}
\alias{initialise_output_storage}
\title{Initialise output for the Gibbs sampler}
\usage{
initialise_output_storage(
  n,
  q1,
  q2,
  initial_vals = NULL,
  n_clusters = NULL,
  n_regions = NULL,
  q_clus1 = 0L,
  q_clus2 = 0L
)
}
\arguments{
\item{n}{An integer specifying the number of simulations (to store parameter
values for).}

\item{q1, q2}{Each an integer specifying the number of columns (or covariates)
in the design matrix for the logistic regression coverage model of the
corresponding list (List 1 or List 2).}

\item{initial_vals}{A named list of values to initialise the output arrays,
typically a result of a call to \code{\link{draw_initial_vals}} (defaults
to \code{NULL}).}

\item{n_clusters}{An integer specifying the number of clusters.}

\item{n_regions}{An integer specifying the number of higher-level clusters
(regions) in the model. (Used if higher-level cluster effects are included
in the model; Defaults to \code{NULL}.)}

\item{q_clus1, q_clus2}{Each an integer specifying the number of cluster-level
covariates for the corresponding list (List 1 or List 2). (Used if
higher-level cluster effects are included in the model; default to
\code{NULL}.)}
}
\value{
A list of (NA-filled) arrays for storing parameter values.
}
\description{
This function initialises a list of arrays (vectors and matrices) to store
the results of the Gibbs samplers.
}
\examples{
n          <- 4
q1 <- q2   <- 2
n_clusters <- 10

initialise_output_storage(n            = n,
                          q1           = q1,
                          q2           = q2,
                          initial_vals = list(coefficients1 = rep(0.5, q1),
                                              coefficients2 = rep(0.1, q2)))

## With low-level cluster effects
initialise_output_storage(n            = n,
                          q1           = q1,
                          q2           = q2,
                          n_clusters   = n_clusters,
                          initial_vals = 
                            list(coefficients1    = rep(0.5, q1),
                                 coefficients2    = rep(0.1, q2),
                                 cluster_effects1 = rep(0.25, n_clusters),
                                 cluster_effects2 = rep(0.01, n_clusters),
                                 clusters_sd1     = 1.3,
                                 clusters_sd2     = 2.4))

## With low- and high-level cluster effects
q_clus1   <- 3
q_clus2   <- 3
n_regions <- 2

initialise_output_storage(n            = n,
                          n_clusters   = n_clusters,
                          n_regions    = n_regions,
                          q1           = q1,
                          q2           = q2,
                          q_clus1      = q_clus1,
                          q_clus2      = q_clus2,
                          initial_vals = 
                            list(coefficients1      = rep(0.5, q1),
                                 coefficients2      = rep(0.1, q2),
                                 cluster_effects1   = rep(0.25, n_clusters),
                                 cluster_effects2   = rep(0.01, n_clusters),
                                 clusters_sd1       = 1.3,
                                 clusters_sd2       = 2.4,
                                 coefficients_clus1 = rep(0.1, q_clus1),
                                 coefficients_clus2 = rep(0.3, q_clus2),
                                 regions_intercept1 = 0.5,
                                 regions_intercept2 = 0.5,
                                 region_effects1    = rnorm(n_regions, 0.5, 0.8),
                                 region_effects2    = rnorm(n_regions, 0.5, 0.8),
                                 regions_sd1        = 0.8,
                                 regions_sd2        = 0.8))
 
}
